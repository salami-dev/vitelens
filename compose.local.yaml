# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose




# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.local
    environment:
      NODE_ENV: development
    ports:
      - 3000:3000
    develop:
      watch:
        - action: sync
          path: ./client
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
  
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.local
    env_file:
      - ./server/.env
    environment:
      NODE_ENV: development
    ports:
      - 8000:8000
    develop:
      watch:
        - action: sync
          path: ./server
          target: /usr/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=vitelens-dev-db
      - POSTGRES_PASSWORD=password
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:

